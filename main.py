"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç—ã"""
import json
import os
import random
from string import ascii_letters, whitespace
import sys

from environs import Env
from sqlalchemy import create_engine, func, insert, exc
from sqlalchemy.orm import sessionmaker
from sqlalchemy_utils import database_exists, create_database
from telebot import TeleBot, types, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.apihelper import ApiTelegramException

from bot_classes import Command, BotStates
from models import Words, Users, Users_words, create_tables


DB_DATA = 'db_data.json'

env = Env()
env.read_env()
PROTOCOL = env('PROTOCOL')
USER = env('USER')
PASSWORD = env.int('PASSWORD')
HOST = env('HOST')
PORT = env.int('PORT')
DB_NAME = env('DB_NAME')
TOKEN = env('TOKEN')

ENG_WORD_CHARS = ascii_letters + whitespace + '-'
RUS_LOWER_CHARS = '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é'
RUS_WORD_CHARS = RUS_LOWER_CHARS + RUS_LOWER_CHARS.upper() + whitespace + '-'


def create_db():
    """–°–æ–∑–¥–∞–µ–º –ë–î"""
    try:
        DSN = f"{PROTOCOL}://{USER}:{PASSWORD}@{HOST}:{PORT}/{DB_NAME}"
        engine = create_engine(DSN)
        if not database_exists(engine.url):
            create_database(engine.url)
        Session = sessionmaker(bind=engine)
        global session
        session = Session()
        create_tables(engine)
    except (exc.OperationalError,
            exc.ArgumentError) as err:
        print('Incorrect DSN string', err)
        sys.exit()


def read_json():
    """–°—á–∏—Ç—ã–≤–∞–µ–º JSON —Ñ–∞–π–ª"""
    if DB_DATA not in os.listdir():
        print(f'DB data file name {DB_DATA} '
              f'not found in the project folder {os.getcwd()}')
        sys.exit()
    with open(DB_DATA, 'r', encoding='utf-8') as f:
        try:
            data = json.load(f)
        except json.decoder.JSONDecodeError as err:
            print(f'Incorrect JSON data in {DB_DATA}', err)
            sys.exit()
    return data


def make_rows():
    """–ó–∞–ø–æ–ª–Ω—è–µ–º –ë–î –∑–∞–ø–∏—Å—è–º–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        for el in read_json():
            if 'Words' == el['model']:
                session.add(Words(eng_word=el['fields']['eng_word'],
                                  rus_word=el['fields']['rus_word'],
                                  common_word=el['fields']['common_word']))
            elif 'Users' == el['model']:
                session.add(Users(telegram_id=el['fields']['telegram_id']))
            elif 'Users_words' == el['model']:
                session.add(Users_words(user_id=el['fields']['user_id'],
                                        word_id=el['fields']['word_id']))
    except KeyError as err:
        print(f'Incorrect key {err} while trying to get it in '
              f'FOR loop')
        sys.exit()
    session.commit()


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot
try:
    TOKEN = env('TOKEN')
except ApiTelegramException as err:
    print(f'Invalid token {TOKEN}', err)
    sys.exit()
else:
    state_storage = StateMemoryStorage()
    bot = TeleBot(TOKEN, state_storage=state_storage)


def get_user_id(message):
    """–ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return session.query(Users).filter(
        Users.telegram_id == message.from_user.id).subquery()


def count_common_words():
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ"""
    return session.query(func.count(Words.word_id)).filter(
        Words.common_word == True).one()[0]


def count_user_words(message):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –≤ –ª–∏—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return session.query(func.count(Users_words.user_id)).filter(
        Users_words.user_id == get_user_id(message).c.user_id).one()[0]


def get_common_eng_words():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ"""
    res = []
    common_eng_words = session.query(Words.eng_word).filter(
        Words.common_word == True).all()
    [res.append(word[0]) for word in common_eng_words]
    return res


def get_user_eng_words(message):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    res = []
    user_eng_words = session.query(Words.eng_word).join(Users_words).filter(
        get_user_id(message).c.user_id == Users_words.user_id).all()
    [res.append(word[0]) for word in user_eng_words]
    return res


def get_eng_words(message):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤, –∏–º–µ—é—â–∏—Ö—Å—è –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ
     –∏ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    res = []
    res += get_common_eng_words() + get_user_eng_words(message)
    random.shuffle(res)
    return res


def get_common_rus_words():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ"""
    res = []
    common_rus_words = session.query(Words.rus_word).filter(
        Words.common_word == True).all()
    [res.append(word[0]) for word in common_rus_words]
    return res


def get_user_rus_words(message):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    res = []
    user_rus_words = session.query(Words.rus_word).join(Users_words).filter(
        get_user_id(message).c.user_id == Users_words.user_id).all()
    [res.append(word[0]) for word in user_rus_words]
    return res


def get_rus_words(message):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤, –∏–º–µ—é—â–∏—Ö—Å—è –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ
     –∏ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    res = []
    res += get_common_rus_words() + get_user_rus_words(message)
    random.shuffle(res)
    return res


@bot.message_handler(commands=['start'])
def start(message):
    """–í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start"""
    msg = (
        "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. "
        "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
        "–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cards")
    bot.send_message(message.chat.id, msg)
    users = session.query(Users.telegram_id).all()
    if (message.from_user.id,) not in users:
        session.add(Users(telegram_id=message.from_user.id))
        session.commit()
        msg = "Hello, stranger, let's study English..."
        bot.send_message(message.chat.id, msg)


@bot.message_handler(commands=['cards'])
def create_cards(message):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Å–µ–º–∏ –∫–Ω–æ–ø–æ–∫: 4 –∫–Ω–æ–ø–∫–∏ —ç—Ç–æ
    –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∞ 3 - —ç—Ç–æ –∫–Ω–æ–ø–∫–∏-–¥–µ–π—Å—Ç–≤–∏—è"""
    translate_word = get_rus_words(message)[0]
    target_word = session.query(Words.eng_word).filter(
        Words.rus_word == translate_word).one()[0]
    random_eng_words = []
    for word in get_eng_words(message):
        if len(random_eng_words) < 3 and word != target_word:
            random_eng_words.append(word)
    buttons_text = []
    buttons_text += [target_word] + random_eng_words
    random.shuffle(buttons_text)
    buttons_text += [Command.NEXT, Command.ADD_WORD, Command.DELETE_WORD]
    global buttons
    buttons = [types.KeyboardButton(text=button) for button in buttons_text]
    cards = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    cards.add(*buttons)
    msg = f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{translate_word}'?"
    bot.send_message(message.chat.id, msg, reply_markup=cards)
    bot.set_state(message.from_user.id, BotStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤"""
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def input_eng_word_to_add(message):
    """–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ"
    bot.send_message(message.chat.id, msg)
    bot.set_state(message.from_user.id, BotStates.check_eng_word_to_add,
                  message.chat.id)


@bot.message_handler(state=BotStates.check_eng_word_to_add)
def check_eng_word_to_add(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞
    –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    prepared_word = message.text.lower().capitalize().strip()
    if not set(message.text) < set(ascii_letters + whitespace + '-'):
        msg = ("–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ. –í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω—ã "
               "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.\n"
               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.send_message(message.chat.id, msg)
        return
    elif prepared_word in get_eng_words(message):
        msg = ("–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{prepared_word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.\n"
               "–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        bot.send_message(message.chat.id, msg)
        return
    bot.set_state(message.from_user.id, BotStates.input_rus_word_to_add,
                  message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['new_eng_word'] = prepared_word
    input_rus_word_to_add(message)


@bot.message_handler(state=BotStates.input_rus_word_to_add)
def input_rus_word_to_add(message):
    """–í–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = "–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞"
    bot.send_message(message.chat.id, msg)
    bot.set_state(message.from_user.id, BotStates.check_rus_word_to_add,
                  message.chat.id)


@bot.message_handler(state=BotStates.check_rus_word_to_add)
def check_rus_word_to_add(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞
    –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    prepared_word = message.text.lower().capitalize().strip()
    if not set(message.text) < set(RUS_WORD_CHARS):
        msg = ("–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ. –í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω—ã "
               "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.\n"
               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.send_message(message.chat.id, msg)
        return
    elif prepared_word in get_eng_words(message):
        msg = (f"–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{prepared_word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.\n"
               "–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        bot.send_message(message.chat.id, msg)
        return
    bot.set_state(message.from_user.id, BotStates.new_row, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['new_rus_word'] = prepared_word
    add_new_row(message)


@bot.message_handler(state=BotStates.new_row)
def add_new_row(message):
    """–ó–∞–ø–∏—Å—å –ø–∞—Ä—ã —Å–ª–æ–≤ –≤ –ë–î"""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        new_eng_word = data['new_eng_word']
        new_rus_word = data['new_rus_word']
    user_id = session.query(Users.user_id).filter(
        Users.telegram_id == message.from_user.id).one()[0]
    words_row = session.execute(insert(Words).returning(Words.word_id),
                                [{'eng_word': new_eng_word,
                                  'rus_word': new_rus_word,
                                  'common_word': False}])
    new_eng_word_id = words_row.fetchone()[0]
    users_words_row = Users_words(user_id=user_id, word_id=new_eng_word_id)
    session.add(users_words_row)
    session.commit()
    msg = ("–°–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n–ö–æ–ª-–≤–æ —Å–ª–æ–≤ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ: "
           f"{count_user_words(message)}")
    bot.send_message(message.chat.id, msg)
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def input_eng_word_to_delete(message):
    """–í–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = ("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ "
           "—É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è")
    bot.send_message(message.chat.id, msg)
    bot.set_state(message.from_user.id, BotStates.check_eng_word_to_delete,
                  message.chat.id)
